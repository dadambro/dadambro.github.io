silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- codename::adjectives
animals <- codename::animals
paste0("The ", sample(colors,1), " ", sample(animals,1), " is ", sample(adjectives,1))
}
silly.function.helper(1)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- codename::adjectives
animals <- codename::animals
paste0("The ", sample(colors,1), " ", animals[x,], " is ", adjectives[x,])
}
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(3)
silly.function.helper(15)
silly.function.helper(80)
silly.function.helper(978)
animals
adjectives
382
silly.function.helper(879)
silly.function.helper(315)
animals
sample(adjectives,5)
sample(nrow(adjectives), 5)
nrow(adjectives)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- sample(codename::adjectives,x)
animals <- sample(codename::animals,x)
paste0("The ", sample(colors,1), " ", animals[x,], " is ", adjectives[x,])
}
silly.function.helper(3)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- sample(codename::adjectives,x, replace = TRUE)
animals <- sample(codename::animals,x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[x,], " is ", adjectives[x,])
}
silly.function.helper(3)
silly.function.helper(4)
sample(codename::adjectives,x, replace = TRUE)
sample(codename::adjectives,3, replace = TRUE)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- sample(nrow(codename::adjectives), x)
animals <- sample(nrow(codename::animals),x)
paste0("The ", sample(colors,1), " ", animals[x,], " is ", adjectives[x,])
}
silly.function.helper(3)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjectives <- sample(nrow(codename::adjectives), x)
animals <- sample(nrow(codename::animals),x)
paste0("The ", sample(colors,1), " ", animals[x], " is ", adjectives[x])
}
silly.function.helper(3)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x)
animal <- sample(nrow(codename::animals),x)
paste0("The ", sample(colors,1), " ", animals[animal], " is ", adjectives[adjective])
}
silly.function.helper(3)
adjective <- sample(nrow(codename::adjectives), 4)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x)
animal <- sample(nrow(codename::animals),x)
paste0("The ", sample(colors,1), " ", animals[animal, ], " is ", adjectives[adjective, ])
}
silly.function.helper(3)
adjective <- sample(nrow(codename::adjectives), 3, replace = TRUE)
adjective
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
silly.function.helper(3)
silly.function.helper(19)
silly.function.helper(10000)
silly.function.helper(578941654981)
silly.function.helper(57894)
system.file(package = "codename")
system.file(package = "cod4ad")
is.true(system.file(package = "cod4ad"))
is_true(system.file(package = "cod4ad"))
isTRUE(system.file(package = "cod4ad"))
isTRUE(system.file(package = "base"))
isTRUE(system.file(package = "codename"))
exists(codename)
exists(a)
exists()
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
silly.function.helper(67)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentence <- function(x){
lapply(x, silly.function.helper(x))
}
random.sentence(3)
library(codename)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentence <- function(x){
lapply(x, silly.function.helper)
}
random.sentence(3)
random.sentence(1:5)
random.sentence(1:85)
a <-random.sentence(5)
a
a <-random.sentence(1:5)
a
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(999)
random.sentence(1:999)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentences <- function(x){
lapply(x, silly.function.helper)
}
random.sentences(a)
random.sentences("a")
is.numeric(1:10)
is.numeric("a")
list(1,3,3)
is.numeric(list(1,3,3))
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentences <- function(x){
if(!is.numeric(x){
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentences <- function(x){
if(!is.numeric(x)){
stop("Expecting numeric input!")
}
lapply(x, silly.function.helper)
}
random.sentences("a")
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
random.sentences(15)
silly.function.helper(1:3)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
silly.function.helper(1)
set.seed(1)
random.sentences(1)
random.sentences(1)
set.seed(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
set.seed(1)
set.seed(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
random.sentences(1)
set.seed(1)
random.sentences(1:3)
random.sentences(1:3)
set.seed(1)
random.sentences(1:3)
set.seed(1)
random.sentences(2)
random.sentences(2)
random.sentences(2)
set.seed(1)
random.sentences(2)
random.sentences(2)
random.sentences(2)
silly.function.helper <- function(x){
colors <- palette(rainbow(6))
adjective <- sample(nrow(codename::adjectives), x, replace = TRUE)
animal <- sample(nrow(codename::animals),x, replace = TRUE)
paste0("The ", sample(colors,1), " ", animals[sample(animal,1), ], " is ", adjectives[sample(adjective,1), ])
}
random.sentences <- function(x){
if(!is.numeric(x)){
stop("Expecting numeric input!")
}
sentence.list <- lapply(x, silly.function.helper)
return(sentence.list)
}
random.sentences(3)
random.sentences(3)
random.sentences(3)
random.sentences(3)
set.seed(1)
random.sentences(3)
random.sentences(3)
random.sentences(3)
random.sentences(3)
random.sentences(3)
x <- 1:5
random.sentences(x)
random.sentences(x)
set.seed(15)
random.sentences(1:3)
random.sentences(1:3)
set.seed(15)
random.sentences(1:6)
set.seed(15)
random.sentences(1:3)
set.seed(15)
random.sentences(1:3)
equal(a,b)
setequal(1,2)
set.seed(15)
a <- random.sentences(1:3)
set.seed(15)
b <- random.sentences(1:3)
setequal(a,b)
#Set seed and generate 3 sentences
set.seed(15)
a <- random.sentences(1:3)
#Reset seed and see if the same 3 sentences appear
set.seed(15)
b <- random.sentences(1:3)
print(a)
print(b)
setequal(a,b)
render("./_Rmd/2023-06-29-blog-post-3.Rmd", output_format = "github_document", output_dir = "./_posts", output_options = list(html_preview = FALSE))
library(rmarkdown)
render("./_Rmd/2023-06-29-blog-post-3.Rmd", output_format = "github_document", output_dir = "./_posts", output_options = list(html_preview = FALSE))
install.packages("class")
library(class)
install.packages("tree")
library(rmarkdown)
render("./_Rmd/2023-07-06-Project-2.Rmd", output_format = "github_document", output_dir = "./_posts", output_options = list(html_preview = FALSE))
pokemon.lookup <- function(x, unit = NULL, ...){
poke.query <- paste0("https://pokeapi.co/api/v2/pokemon/", str_to_lower(x))
poke.get <- GET(poke.query)
poke.char <- fromJSON(rawToChar(poke.get$content))
name <- str_to_title(poke.char$name)
id.number <- poke.char$id
type1 <- poke.char$types$type$name[1]
type2 <- poke.char$types$type$name[2]
height <- poke.char$height
weight <- poke.char$weight
hp <- poke.char$stats$base_stat[1]
attack <- poke.char$stats$base_stat[2]
defense <- poke.char$stats$base_stat[3]
special.attack <- poke.char$stats$base_stat[4]
special.defense <- poke.char$stats$base_stat[5]
speed <- poke.char$stats$base_stat[6]
if("imperial" %in% unit){
height <- round((height * 3.93700787))
weight <- round((weight * 0.2204622622))
}
if("metric" %in% unit){
height <- round((height/10), 1)
weight <- round((weight/10), 1)
}
poke.table <- tibble(name = name,
id.number = id.number,
type1 = type1,
type2 = type2,
height = height,
weight = weight,
hp = hp,
attack = attack,
defense = defense,
special.attack = special.attack,
special.defense = special.defense,
speed = speed
)
return(poke.table)
}
pokemon.vector <- function(x, ...){
if(is.numeric(x)){
stop("Expecting two Pokemon names, not numbers!")
}
if(length(x) > 2){
stop("Expecting exactly two Pokemon names!")
}
poke.1 <- str_to_lower(x[1])
poke.2 <- str_to_lower(x[2])
poke.1.query <- paste0("https://pokeapi.co/api/v2/pokemon/", poke.1)
poke.1.get <- GET(poke.1.query)
poke.1.char <- fromJSON(rawToChar(poke.1.get$content))
poke.1.id <- poke.1.char$id
poke.2.query <- paste0("https://pokeapi.co/api/v2/pokemon/", poke.2)
poke.2.get <- GET(poke.2.query)
poke.2.char <- fromJSON(rawToChar(poke.2.get$content))
poke.2.id <- poke.2.char$id
poke.vec <- seq(poke.1.id, poke.2.id)
return(poke.vec)
}
gen1.correction <- function(x, type.change = TRUE, add.special = TRUE, delete.sp.att.def = FALSE, ...){
y <- x %>% filter(id.number <= 151)
z <- x %>% filter(id.number > 151)
if(isTRUE(type.change)){
y$type1[y$type1 == "fairy"] <- "normal" #Corrects Clefairy and Clefable to Gen I typing
y$type2[y$type2 == "fairy"] <- NA       #Corrects Jigglypuff, Wigglytuff, and Mr-Mime to Gen I typing
y$type2[y$type2 == "steel"] <- NA       #Corrects Magnemite and Magneton to Gen I typing
if(max(x$id.number) > 151){
warning("Pokemon that did not exist in Generation I are in this report. The typing scheme in this report is now inconsistent")
}
}
if(isTRUE(add.special)){
#Special stat values sourced from bulbapedia.bulbagarden.net
special.vector <- c(65, 80, 100, 50, 65, 85, 50, 65, 85, 20, 25, 80, 20, 25, 45, 35, 50, 70, 25, 50, 31, 61, 40, 65, 50, 90, 30, 55, 40, 55,   75, 40, 55, 75, 60, 85, 65, 100, 25, 50, 40, 75, 75, 85, 100, 55, 80, 40, 90, 45, 70, 40, 65, 50, 80, 35, 60, 50, 80, 40, 50, 70, 105, 120,   135, 35, 50, 65, 70, 85, 100, 100, 120, 30, 45, 55, 65, 80, 40, 80, 95, 120, 58, 35, 60, 70, 95, 40, 65, 45, 85, 100, 115, 130, 30, 90, 115,   25, 50, 55, 80, 60, 125, 40, 50, 35, 35, 60, 60, 85, 30, 45, 105, 100, 40, 70, 95, 50, 80, 70, 100, 100, 55, 95, 85, 85, 55, 70, 20, 100,     95, 48, 65, 110, 110, 110, 75, 90, 115, 45, 70, 60, 65, 125, 125, 125, 50, 70, 100, 154, 100)
y <- y %>% mutate(gen1.special = special.vector[y$id.number])
}
new.report <- bind_rows(y,z)
if(isTRUE(delete.sp.att.def)){
if(max(new.report$id.number > 151)){
warning("Pokemon that did not exist in Generation I are in this report. Are you sure you wanted to delete special attack and special defense?")
}
new.report <- new.report %>% select(-c(special.attack, special.defense))
}
return(new.report)
}
pokemon.batch.report <- function(x, gen1.correct = FALSE, ...){
if(!is.numeric(x)){
if(length(x) > 1){
x <- pokemon.vector(x)
}
}
x <- lapply(x, pokemon.lookup, ...)
batch.lookup <- bind_rows(x)
if(isTRUE(gen1.correct)){
batch.lookup <- gen1.correction(batch.lookup, ... )
}
return(batch.lookup)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(randomForest)
library(knitr)
#Create a dataset with all 1010 Pokemon and their base stats using the functions I created in Project 1
myData <- pokemon.batch.report(1:1010)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(randomForest)
library(knitr)
library(httr)
library(jsonlite)
#Create a dataset with all 1010 Pokemon and their base stats using the functions I created in Project 1
myData <- pokemon.batch.report(1:1010)
myData <- myData %>% mutate(isBug = if_else(type1 == "bug" | type2 == "bug", 1, 0, 0))
select(myData, height:isBug)
select(myData, hp:isBug)
myData <- myData %>% select(hp:isBug)
set.seed(80)
trainIndex <- createDataPartition(myData$isBug, p = 0.8, list = FALSE)
myTrain <- myData[trainIndex,]
myTest <- myData[-trainIndex,]
randomForestFit <- train(isBug ~ ., data = myTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 5, repeats = 3),
tuneGrid = data.frame(mtry = 1:3))
myData$isBug <- as.factor(myData$isBug)
set.seed(80)
trainIndex <- createDataPartition(myData$isBug, p = 0.8, list = FALSE)
myTrain <- myData[trainIndex,]
myTest <- myData[-trainIndex,]
randomForestFit <- train(isBug ~ ., data = myTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 5, repeats = 3),
tuneGrid = data.frame(mtry = 1:3))
randomForestFit$bestTune
randomForestFit$bestTune
randomForestFit <- train(isBug ~ ., data = myTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 5, repeats = 3),
tuneGrid = data.frame(mtry = 1:3))
randomForestFit <- train(isBug ~ ., data = myTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 5, repeats = 3),
tuneGrid = data.frame(mtry = 1:5))
randomForestFit$bestTune
randomForestPredict <- predict(randomForestFit, newdata = myTest)
x <- confusionMatrix(randomForestPredict, myTest$isBug)
print(x)
randomForestPredict <- predict(randomForestFit, newdata = myTest, positive = "1")
x <- confusionMatrix(randomForestPredict, myTest$isBug)
print(x)
randomForestPredict <- predict(randomForestFit, newdata = myTest, positive = 1)
x <- confusionMatrix(randomForestPredict, myTest$isBug)
print(x)
myData$isBug <- relevel(myData$isBug, ref = "1")
set.seed(80)
trainIndex <- createDataPartition(myData$isBug, p = 0.8, list = FALSE)
myTrain <- myData[trainIndex,]
myTest <- myData[-trainIndex,]
randomForestFit <- train(isBug ~ ., data = myTrain,
method = "rf",
preProcess = c("center", "scale"),
trControl = trainControl(method = "repeatedcv", number = 5, repeats = 3),
tuneGrid = data.frame(mtry = 1:5))
randomForestFit$bestTune
randomForestPredict <- predict(randomForestFit, newdata = myTest)
x <- confusionMatrix(randomForestPredict, myTest$isBug)
print(x)
sum(myData$isBug)
sum(as.numeric(myData$isBug))
myData$isBug
levels(myData$isBug)
randomForestPredict
myTest$isBug
filter(myData, isBug == 1)
render("./_Rmd/2023-07-19-blog-post-4.Rmd", output_format = "github_document", output_dir = "./_posts", output_options = list(html_preview = FALSE))
library(rmarkdown)
render("./_Rmd/2023-07-19-blog-post-4.Rmd", output_format = "github_document", output_dir = "./_posts", output_options = list(html_preview = FALSE))
